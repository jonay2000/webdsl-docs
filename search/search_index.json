{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WebDSL \u00b6 WebDSL is a domain-specific language for developing dynamic web applications with a rich data model, developed and maintained by the Programming Language Group at Delft University of Technology .","title":"WebDSL"},{"location":"#webdsl","text":"WebDSL is a domain-specific language for developing dynamic web applications with a rich data model, developed and maintained by the Programming Language Group at Delft University of Technology .","title":"WebDSL"},{"location":"background/","text":"Background \u00b6 This section contains information on the ideas, architecture, and design decisions behind WebDSL. For the WebDSL language reference, see the Reference section.","title":"Background"},{"location":"background/#background","text":"This section contains information on the ideas, architecture, and design decisions behind WebDSL. For the WebDSL language reference, see the Reference section.","title":"Background"},{"location":"background/about/","text":"About WebDSL \u00b6 WebDSL is a domain-specific language for developing dynamic web applications with a rich data model. Features \u00b6 Domain modeling User interfaces Action code Access control Data validation Ajax Search Email Styling Recurring tasks Java class interface Software \u00b6 WebDSL applications are translated to Java web applications. The WebDSL generator is implemented using Stratego/XT , SDF, and Spoofax . IDE support for developing WebDSL applications is provided by the Eclipse plugin . Developers \u00b6 WebDSL is being developed by Eelco Visser and Ph.D./M.Sc. students in the context of the Model-Driven Software Evolution project at Delft University of Technology. Active developers \u00b6 Danny Groenewegen Elmer van Chastelet Daniel A. A. Pelsmaeker Max de Krieger Eelco Visser Non-active developers \u00b6 Zef Hemel Lennart Kats Sander Vermolen Sander van der Burg Nathan Bruning Chris Gersen Chris Melman Michel Weststrate Jippe Holwerda Ruben Verhaaf Wouter Mouw","title":"About WebDSL"},{"location":"background/about/#about-webdsl","text":"WebDSL is a domain-specific language for developing dynamic web applications with a rich data model.","title":"About WebDSL"},{"location":"background/about/#features","text":"Domain modeling User interfaces Action code Access control Data validation Ajax Search Email Styling Recurring tasks Java class interface","title":"Features"},{"location":"background/about/#software","text":"WebDSL applications are translated to Java web applications. The WebDSL generator is implemented using Stratego/XT , SDF, and Spoofax . IDE support for developing WebDSL applications is provided by the Eclipse plugin .","title":"Software"},{"location":"background/about/#developers","text":"WebDSL is being developed by Eelco Visser and Ph.D./M.Sc. students in the context of the Model-Driven Software Evolution project at Delft University of Technology.","title":"Developers"},{"location":"background/about/#active-developers","text":"Danny Groenewegen Elmer van Chastelet Daniel A. A. Pelsmaeker Max de Krieger Eelco Visser","title":"Active developers"},{"location":"background/about/#non-active-developers","text":"Zef Hemel Lennart Kats Sander Vermolen Sander van der Burg Nathan Bruning Chris Gersen Chris Melman Michel Weststrate Jippe Holwerda Ruben Verhaaf Wouter Mouw","title":"Non-active developers"},{"location":"background/meeting-notes/","text":"Meeting Notes \u00b6 Meeting notes of past WebDSL meetings are documented here. WebDSL Improvement Meeting May 2021 \u00b6 The following points were discussed in a WebDSL improvement meeting. Documentation \u00b6 A new documentation website using MkDocs Material, organized according to https://documentation.divio.com/ . Port all relevant material from the current documentation to the new style and organize accordingly. Introduce a new getting-started guide, inspired by the guide written for the Web Programming Languages course. Development Experience \u00b6 Finish the WebDSL SDF3 and Statix implementation to provide a new, modernized and robust WebDSL front-end. Modernize the WebDSL back-end: get analysis information in Stratego from a Stratego-Statix API, split up transformation tasks in more modular fashion to prepare for incrementalization. New Language Features \u00b6 Introduce more client-side features or constructs in order to maintain WebDSL's consistency when writing interactive web apps. Introduce the notion of transactions in WebDSL in order to better integrate with external services. Enhancement Proposals \u00b6 Syntax \u00b6 Add Syntactic sugar for easily usable page routing customization. Reduce Inconsistencies in the existing syntax: Both .length and .length() are used for different types. Optional semicolons in template code vs. required semicolons in action code. Optional brackets for most definitions (templates and actions) but required brackets when calling an action. Notion of sections is unnecessary. Improve Built-in Functionality \u00b6 Improve interoperability of built-in types such as Date/DateTime/Time, Integer/Float/Long and File/Image. Introduce missing built-in inputs: inputajax for Secret and WikiText types. Reduce the effort necessary to delete existing entities that have relations. New Language Constructs \u00b6 Introduce break/continue for loops and support early returns in services. Introduce conditionals in template attributes. Introduce locally overridable UI attributes. Introduce the notion of middleware that can for example validate or modify incoming requests. Lucene Search \u00b6 Support searching for true substrings (*query*). Support the ability to chain search conditions on multiple fields. Development Environment \u00b6 Introduce a containerized environment to build and run WebDSL apps. Reduce the effort necessary to set up a project due to configuration settings in application.ini . Certain database modes would not work on certain operating systems, the default one has to work on all platforms.","title":"Meeting Notes"},{"location":"background/meeting-notes/#meeting-notes","text":"Meeting notes of past WebDSL meetings are documented here.","title":"Meeting Notes"},{"location":"background/meeting-notes/#webdsl-improvement-meeting-may-2021","text":"The following points were discussed in a WebDSL improvement meeting.","title":"WebDSL Improvement Meeting May 2021"},{"location":"background/meeting-notes/#documentation","text":"A new documentation website using MkDocs Material, organized according to https://documentation.divio.com/ . Port all relevant material from the current documentation to the new style and organize accordingly. Introduce a new getting-started guide, inspired by the guide written for the Web Programming Languages course.","title":"Documentation"},{"location":"background/meeting-notes/#development-experience","text":"Finish the WebDSL SDF3 and Statix implementation to provide a new, modernized and robust WebDSL front-end. Modernize the WebDSL back-end: get analysis information in Stratego from a Stratego-Statix API, split up transformation tasks in more modular fashion to prepare for incrementalization.","title":"Development Experience"},{"location":"background/meeting-notes/#new-language-features","text":"Introduce more client-side features or constructs in order to maintain WebDSL's consistency when writing interactive web apps. Introduce the notion of transactions in WebDSL in order to better integrate with external services.","title":"New Language Features"},{"location":"background/meeting-notes/#enhancement-proposals","text":"","title":"Enhancement Proposals"},{"location":"background/meeting-notes/#syntax","text":"Add Syntactic sugar for easily usable page routing customization. Reduce Inconsistencies in the existing syntax: Both .length and .length() are used for different types. Optional semicolons in template code vs. required semicolons in action code. Optional brackets for most definitions (templates and actions) but required brackets when calling an action. Notion of sections is unnecessary.","title":"Syntax"},{"location":"background/meeting-notes/#improve-built-in-functionality","text":"Improve interoperability of built-in types such as Date/DateTime/Time, Integer/Float/Long and File/Image. Introduce missing built-in inputs: inputajax for Secret and WikiText types. Reduce the effort necessary to delete existing entities that have relations.","title":"Improve Built-in Functionality"},{"location":"background/meeting-notes/#new-language-constructs","text":"Introduce break/continue for loops and support early returns in services. Introduce conditionals in template attributes. Introduce locally overridable UI attributes. Introduce the notion of middleware that can for example validate or modify incoming requests.","title":"New Language Constructs"},{"location":"background/meeting-notes/#lucene-search","text":"Support searching for true substrings (*query*). Support the ability to chain search conditions on multiple fields.","title":"Lucene Search"},{"location":"background/meeting-notes/#development-environment","text":"Introduce a containerized environment to build and run WebDSL apps. Reduce the effort necessary to set up a project due to configuration settings in application.ini . Certain database modes would not work on certain operating systems, the default one has to work on all platforms.","title":"Development Environment"},{"location":"background/publications/","text":"Publications \u00b6 All WebDSL publications on researchr.org","title":"Publications"},{"location":"background/publications/#publications","text":"All WebDSL publications on researchr.org","title":"Publications"},{"location":"howtos/","text":"How-To's \u00b6 These are some How-To's that help you to get to a specific goal or result with WebDSL. For hands-on tutorials on learning WebDSL, see the Tutorials section. For the WebDSL language reference, see the Reference section. Installation and Build \u00b6 Install WebDSL Install the WebDSL Eclipse Bundle Install the WebDSL Eclipse Plugin Manually Install and Use the WebDSL CLI","title":"How-To's"},{"location":"howtos/#how-tos","text":"These are some How-To's that help you to get to a specific goal or result with WebDSL. For hands-on tutorials on learning WebDSL, see the Tutorials section. For the WebDSL language reference, see the Reference section.","title":"How-To's"},{"location":"howtos/#installation-and-build","text":"Install WebDSL Install the WebDSL Eclipse Bundle Install the WebDSL Eclipse Plugin Manually Install and Use the WebDSL CLI","title":"Installation and Build"},{"location":"howtos/install-cli/","text":"Install and Use the WebDSL CLI \u00b6 Download the WebDSL CLI for your platform: WebDSL CLI Installation \u00b6 An installation of Java 8 or newer and Apache Ant are required. Extract the zip file. Add the webdsl/bin directory to your $PATH . Usage \u00b6 Go to the directory of your application and execute: webdsl run appname.app This will override any existing application.ini file. This generates an application.ini file configured for testing with an H2 in-memory database . If there is already an application.ini file with configuration (see Application Configuration options), use instead: webdsl run Pressing Ctrl + C stops the application. Faster compilation on command-line You can avoid JVM startup overhead by keeping the WebDSL compiler process running. This requires having the Nailgun client installed. For example, on macOS you can install nailgun using brew install nailgun . Add to the application.ini configuration file of your project the following line to use the compile server for all the commands like webdsl run : usecompileserver = true To start the WebDSL nailgun server process, invoke: webdsl start","title":"Install and Use the WebDSL CLI"},{"location":"howtos/install-cli/#install-and-use-the-webdsl-cli","text":"Download the WebDSL CLI for your platform: WebDSL CLI","title":"Install and Use the WebDSL CLI"},{"location":"howtos/install-cli/#installation","text":"An installation of Java 8 or newer and Apache Ant are required. Extract the zip file. Add the webdsl/bin directory to your $PATH .","title":"Installation"},{"location":"howtos/install-cli/#usage","text":"Go to the directory of your application and execute: webdsl run appname.app This will override any existing application.ini file. This generates an application.ini file configured for testing with an H2 in-memory database . If there is already an application.ini file with configuration (see Application Configuration options), use instead: webdsl run Pressing Ctrl + C stops the application. Faster compilation on command-line You can avoid JVM startup overhead by keeping the WebDSL compiler process running. This requires having the Nailgun client installed. For example, on macOS you can install nailgun using brew install nailgun . Add to the application.ini configuration file of your project the following line to use the compile server for all the commands like webdsl run : usecompileserver = true To start the WebDSL nailgun server process, invoke: webdsl start","title":"Usage"},{"location":"howtos/install-eclipse-bundle/","text":"Install the Eclipse with WebDSL Plugin Bundle \u00b6 Install an Eclipse instance with the WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle Troubleshooting \u00b6 macOS: \"Eclipse\" cannot be opened because the developer could not be verified \u00b6 macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the com.apple.quarantine attribute, do: xattr -rc Eclipse.app Eclipse does not start, or complains about missing Java \u00b6 Ensure you have a distribution of Java installed. Then in eclipse.ini , add a -vm line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS: -vm /Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib","title":"Install the Eclipse with WebDSL Plugin Bundle"},{"location":"howtos/install-eclipse-bundle/#install-the-eclipse-with-webdsl-plugin-bundle","text":"Install an Eclipse instance with the WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle","title":"Install the Eclipse with WebDSL Plugin Bundle"},{"location":"howtos/install-eclipse-bundle/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"howtos/install-eclipse-bundle/#macos-eclipse-cannot-be-opened-because-the-developer-could-not-be-verified","text":"macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the com.apple.quarantine attribute, do: xattr -rc Eclipse.app","title":" macOS: \"Eclipse\" cannot be opened because the developer could not be verified"},{"location":"howtos/install-eclipse-bundle/#eclipse-does-not-start-or-complains-about-missing-java","text":"Ensure you have a distribution of Java installed. Then in eclipse.ini , add a -vm line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS: -vm /Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib","title":"Eclipse does not start, or complains about missing Java"},{"location":"howtos/install-eclipse-plugin-manually/","text":"Install the WebDSL Eclipse Plugin \u00b6 Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer. In Eclipse, go to menu Help \u2192 Install New Software . In the Work with: text area, type: https://webdsl.org/update Uncheck Group items by category to make the plugin visible. Check WebDSL Editor . Click Install and go through the remaining steps. Restart Eclipse. It is recommended that the eclipse.ini of Eclipse is updated to give WebDSL enough stack space and memory to function correctly. Include the following options in eclipse.ini , below the line that starts with -vmargs . -Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server On macOS this file can be found at Eclipse.app/Contents/MacOS/eclipse.ini .","title":"Install the WebDSL Eclipse Plugin"},{"location":"howtos/install-eclipse-plugin-manually/#install-the-webdsl-eclipse-plugin","text":"Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer. In Eclipse, go to menu Help \u2192 Install New Software . In the Work with: text area, type: https://webdsl.org/update Uncheck Group items by category to make the plugin visible. Check WebDSL Editor . Click Install and go through the remaining steps. Restart Eclipse. It is recommended that the eclipse.ini of Eclipse is updated to give WebDSL enough stack space and memory to function correctly. Include the following options in eclipse.ini , below the line that starts with -vmargs . -Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server On macOS this file can be found at Eclipse.app/Contents/MacOS/eclipse.ini .","title":"Install the WebDSL Eclipse Plugin"},{"location":"howtos/install/","text":"Install WebDSL \u00b6 To get started with WebDSL, install the WebDSL editor and the WebDSL Command-Line interface. WebDSL Editor \u00b6 We provide an Eclipse bundle in which you can create and edit WebDSL applications with the assistance of syntax highlighting, static analysis and code completion. Alternatively, you can download the WebDSL plugin in your own Eclipse instance. Recommended: Eclipse Bundle Download an Eclipse instance with the latest WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle Installation instructions . Alternative: Eclipse Plugin Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer through the update site: https://webdsl.org/update Installation instructions . Command-Line Interface \u00b6 The WebDSL CLI transforms your WebDSL code to web applications. Recommended: Download Latest Build Download the WebDSL CLI for your platform: WebDSL CLI Installation instructions . Alternative: Build WebDSL Yourself Clone the WebDSL GitHub repository and follow the instructions listed there. WebDSL GitHub Repository Start Creating Web Applications \u00b6 Once installed and started, you are ready to create web applications with WebDSL. Learn WebDSL by example through our tutorials .","title":"Install WebDSL"},{"location":"howtos/install/#install-webdsl","text":"To get started with WebDSL, install the WebDSL editor and the WebDSL Command-Line interface.","title":"Install WebDSL"},{"location":"howtos/install/#webdsl-editor","text":"We provide an Eclipse bundle in which you can create and edit WebDSL applications with the assistance of syntax highlighting, static analysis and code completion. Alternatively, you can download the WebDSL plugin in your own Eclipse instance. Recommended: Eclipse Bundle Download an Eclipse instance with the latest WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle Installation instructions . Alternative: Eclipse Plugin Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer through the update site: https://webdsl.org/update Installation instructions .","title":"WebDSL Editor"},{"location":"howtos/install/#command-line-interface","text":"The WebDSL CLI transforms your WebDSL code to web applications. Recommended: Download Latest Build Download the WebDSL CLI for your platform: WebDSL CLI Installation instructions . Alternative: Build WebDSL Yourself Clone the WebDSL GitHub repository and follow the instructions listed there. WebDSL GitHub Repository","title":"Command-Line Interface"},{"location":"howtos/install/#start-creating-web-applications","text":"Once installed and started, you are ready to create web applications with WebDSL. Learn WebDSL by example through our tutorials .","title":"Start Creating Web Applications"},{"location":"reference/","text":"Reference \u00b6 This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section.","title":"Reference"},{"location":"reference/#reference","text":"This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section.","title":"Reference"},{"location":"reference/command-line-use/","text":"Command Line Use \u00b6 WebDSL can be invoked from the command-line by using the compiler supplied with the plugin ( https://webdsl.org/selectpage/Download/WebDSLplugin , recommended) or downloading the stand-alone compiler: https://webdsl.org/selectpage/Download/WebDSLJava . Running plugin compiler on command-line \u00b6 Mac/Linux users can start WebDSL using the webdsl script at: eclipse/plugins/webdsl.editor_[version]/webdsl-template/webdsl and Windows users can start WebDSL using the webdsl.bat script at: eclipse/plugins/webdsl.editor_[version]/webdsl-template/webdsl.bat Where [version] is your installed version of the plugin. For convenience, you can add the directory to your path or make an alias for the script. The quickest way to get an application running is to execute: webdsl run appname This will generate an application.ini file with default settings, then compile the application, and start a Tomcat instance on port 8080 with the application deployed. If there is already an application.ini file with settings that have to be used, execute: webdsl run This will also build and run, using the settings in the existing application.ini file. To create just the war file instead, use: webdsl war Building .war file and deploying to external Tomcat \u00b6 The installation of WebDSL will result in a webdsl script and a directory with templates being added to your install location. The script is used to invoke the compilation and deployment of WebDSL applications. In your console, go to the location of the main .app file and invoke the webdsl script with webdsl build The script uses an application.ini file for configuration. If an application.ini file is not in the current directory, the script will offer an interactive way to generate it. If the application.ini is available it will be used to configure the application with e.g. database connection settings. The compilation begins by creating a .servletapp directory to which the WebDSL template, the application files, and the static resources are copied. Then the actual WebDSL compiler, webdslc, is invoked. This will either produce an error and halt, or it will produce the source code of a java web application. Upon a successful run of the webdsl compiler, the script will compile the java code, and build a war file. This war file can be copied manually to the tomcat /webapps dir, or it can be uploaded through the web deploy interface of tomcat. If the tomcat path is set in application.ini, then webdsl deploy will copy the war file to the /webapps directory. If you have updated webdsl and need to copy the new WebDSL template in .servletapp use webdsl cleanall to remove the .servletapp directory (or simply delete it with rm) and then do a build. The script commands can be combined, e.g. webdsl cleanall build deploy to clean the generated directory and its contents, regenerate, and deploy. Example Application \u00b6 1 create a hello.app file hello.app: application test define page root(){ \"Hello world\" } create or generate application.ini: backend=servlet tomcatpath=**path to your tomcat directory e.g. /Apps/tomcat/** appname=hello dbserver=localhost dbuser=**mysql user account, e.g. root** dbpassword=**password** dbname=webdsldb dbmode=create-drop smtphost=localhost smtpport=25 smtpuser= smtppass= 2 create the database mysql -u root -p create database webdsldb; exit 3 start tomcat in another shell: catalina.sh run (stop with cmd/ctrl+c) or in the background catalina.sh start (stop with catalina.sh stop) 4 compile and deploy WebDSL app webdsl cleanall deploy 5 open browser and go to http://localhost:8080/hello","title":"Command Line Use"},{"location":"reference/command-line-use/#command-line-use","text":"WebDSL can be invoked from the command-line by using the compiler supplied with the plugin ( https://webdsl.org/selectpage/Download/WebDSLplugin , recommended) or downloading the stand-alone compiler: https://webdsl.org/selectpage/Download/WebDSLJava .","title":"Command Line Use"},{"location":"reference/command-line-use/#running-plugin-compiler-on-command-line","text":"Mac/Linux users can start WebDSL using the webdsl script at: eclipse/plugins/webdsl.editor_[version]/webdsl-template/webdsl and Windows users can start WebDSL using the webdsl.bat script at: eclipse/plugins/webdsl.editor_[version]/webdsl-template/webdsl.bat Where [version] is your installed version of the plugin. For convenience, you can add the directory to your path or make an alias for the script. The quickest way to get an application running is to execute: webdsl run appname This will generate an application.ini file with default settings, then compile the application, and start a Tomcat instance on port 8080 with the application deployed. If there is already an application.ini file with settings that have to be used, execute: webdsl run This will also build and run, using the settings in the existing application.ini file. To create just the war file instead, use: webdsl war","title":"Running plugin compiler on command-line"},{"location":"reference/command-line-use/#building-war-file-and-deploying-to-external-tomcat","text":"The installation of WebDSL will result in a webdsl script and a directory with templates being added to your install location. The script is used to invoke the compilation and deployment of WebDSL applications. In your console, go to the location of the main .app file and invoke the webdsl script with webdsl build The script uses an application.ini file for configuration. If an application.ini file is not in the current directory, the script will offer an interactive way to generate it. If the application.ini is available it will be used to configure the application with e.g. database connection settings. The compilation begins by creating a .servletapp directory to which the WebDSL template, the application files, and the static resources are copied. Then the actual WebDSL compiler, webdslc, is invoked. This will either produce an error and halt, or it will produce the source code of a java web application. Upon a successful run of the webdsl compiler, the script will compile the java code, and build a war file. This war file can be copied manually to the tomcat /webapps dir, or it can be uploaded through the web deploy interface of tomcat. If the tomcat path is set in application.ini, then webdsl deploy will copy the war file to the /webapps directory. If you have updated webdsl and need to copy the new WebDSL template in .servletapp use webdsl cleanall to remove the .servletapp directory (or simply delete it with rm) and then do a build. The script commands can be combined, e.g. webdsl cleanall build deploy to clean the generated directory and its contents, regenerate, and deploy.","title":"Building .war file and deploying to external Tomcat"},{"location":"reference/command-line-use/#example-application","text":"1 create a hello.app file hello.app: application test define page root(){ \"Hello world\" } create or generate application.ini: backend=servlet tomcatpath=**path to your tomcat directory e.g. /Apps/tomcat/** appname=hello dbserver=localhost dbuser=**mysql user account, e.g. root** dbpassword=**password** dbname=webdsldb dbmode=create-drop smtphost=localhost smtpport=25 smtpuser= smtppass= 2 create the database mysql -u root -p create database webdsldb; exit 3 start tomcat in another shell: catalina.sh run (stop with cmd/ctrl+c) or in the background catalina.sh start (stop with catalina.sh stop) 4 compile and deploy WebDSL app webdsl cleanall deploy 5 open browser and go to http://localhost:8080/hello","title":"Example Application"},{"location":"reference/using-the-editor/","text":"Using the Editor \u00b6 This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section. Download and Installation \u00b6 See Install WebDSL . New Project Wizard \u00b6 See Hello World! in WebDSL . The plugin includes a new project wizard which will help you get started using WebDSL: Right-click in the package explorer and select 'New WebDSL Project' (mostly empty project, shows \u2018hello world\u2019) or \u2018Example WebDSL Project\u2019 (a small example project) Enter project name Select either MySQL or H2 database and enter the required database info (H2 is recommended for first-time users because it doesn\u2019t require extra installation steps). Check \u201coverwrite database when deployed\u201d, \u201cWTP Tomcat\u201d and click Finish (these settings can be easily changed later on by using the \u2018Convert to a WebDSL Project\u2019) The WebDSL project is created, execute the first build (ctrl+alt+b or cmd+alt+b), the application is deployed on an internal Tomcat and the server is started. Go to http://localhost:8080/{projectname} to see the result. Make changes to the app and build the project (ctrl+alt+b or cmd+alt+b), it is automatically deployed. use clean-project.xml to clean the project\u2019s generated files before committing to version control alternatively, switch to deploy to external tomcat setting. Specify the location of tomcat (without \u2026/webapps/), then start tomcat using bin/catalina.sh run (Mac/Linux) or bin/catalina.bat run (Windows). Setting up projects from version control or repairing generated build files \u00b6 Use the \u2018Convert to a WebDSL Project\u2019 wizard to regenerate the project build files (this will overwrite the old files, including application.ini). Troubleshooting \u00b6 If you encounter issues when running the plugin, here are a few things that you should check or try: Do you have a Java JDK 6 installed? Have you tried installing the plugin in a clean Eclipse classic distribution? \u201cTransaction not successfully started\u201d error in log -> check db settings in application.ini, see App Configuration \u201cDispatchservlet class not found\u201d -> rebuild the project and check whether automatic project build of eclipse is enabled Currently, renaming the project in eclipse is not fully supported, check .settings/ . files and application.ini for project references if you want to rename. \u201cProject Facet Java version 6.0 not supported\u201d error, set Eclipse -> Preferences -> Installed JREs to Java 6 or 1.6 Tomcat hangs and shows the following error \u201cjava.lang.OutOfMemoryError: PermGen space\u201d. You can recover from this by killing the Tomcat process (unfortunately it is just listed as \u2018java\u2019) and start it again. To prevent this error or at least postpone it, right click on your project -> Run As -> Run Configurations\u2026 -> click on tomcat instance in tree pane on the left-> click on \u2018Arguments\u2019 tab -> add \u201c-XX:MaxPermSize=512m\u201d to \u2018VM arguments\u2019. Similarly, if Tomcat gives a HeapSpaceError, add \u201c-Xmx1024m\u201d to these options (adjust downwards for low-memory systems). Report issues here: http://yellowgrass.org/project/WebDSL . You can also subscribe to the mailing https://mailman.st.ewi.tudelft.nl/listinfo/webdsl and report your issue, or go to the #webdsl channel on irc.freenode.net","title":"Using the Editor"},{"location":"reference/using-the-editor/#using-the-editor","text":"This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section.","title":"Using the Editor"},{"location":"reference/using-the-editor/#download-and-installation","text":"See Install WebDSL .","title":"Download and Installation"},{"location":"reference/using-the-editor/#new-project-wizard","text":"See Hello World! in WebDSL . The plugin includes a new project wizard which will help you get started using WebDSL: Right-click in the package explorer and select 'New WebDSL Project' (mostly empty project, shows \u2018hello world\u2019) or \u2018Example WebDSL Project\u2019 (a small example project) Enter project name Select either MySQL or H2 database and enter the required database info (H2 is recommended for first-time users because it doesn\u2019t require extra installation steps). Check \u201coverwrite database when deployed\u201d, \u201cWTP Tomcat\u201d and click Finish (these settings can be easily changed later on by using the \u2018Convert to a WebDSL Project\u2019) The WebDSL project is created, execute the first build (ctrl+alt+b or cmd+alt+b), the application is deployed on an internal Tomcat and the server is started. Go to http://localhost:8080/{projectname} to see the result. Make changes to the app and build the project (ctrl+alt+b or cmd+alt+b), it is automatically deployed. use clean-project.xml to clean the project\u2019s generated files before committing to version control alternatively, switch to deploy to external tomcat setting. Specify the location of tomcat (without \u2026/webapps/), then start tomcat using bin/catalina.sh run (Mac/Linux) or bin/catalina.bat run (Windows).","title":"New Project Wizard"},{"location":"reference/using-the-editor/#setting-up-projects-from-version-control-or-repairing-generated-build-files","text":"Use the \u2018Convert to a WebDSL Project\u2019 wizard to regenerate the project build files (this will overwrite the old files, including application.ini).","title":"Setting up projects from version control or repairing generated build files"},{"location":"reference/using-the-editor/#troubleshooting","text":"If you encounter issues when running the plugin, here are a few things that you should check or try: Do you have a Java JDK 6 installed? Have you tried installing the plugin in a clean Eclipse classic distribution? \u201cTransaction not successfully started\u201d error in log -> check db settings in application.ini, see App Configuration \u201cDispatchservlet class not found\u201d -> rebuild the project and check whether automatic project build of eclipse is enabled Currently, renaming the project in eclipse is not fully supported, check .settings/ . files and application.ini for project references if you want to rename. \u201cProject Facet Java version 6.0 not supported\u201d error, set Eclipse -> Preferences -> Installed JREs to Java 6 or 1.6 Tomcat hangs and shows the following error \u201cjava.lang.OutOfMemoryError: PermGen space\u201d. You can recover from this by killing the Tomcat process (unfortunately it is just listed as \u2018java\u2019) and start it again. To prevent this error or at least postpone it, right click on your project -> Run As -> Run Configurations\u2026 -> click on tomcat instance in tree pane on the left-> click on \u2018Arguments\u2019 tab -> add \u201c-XX:MaxPermSize=512m\u201d to \u2018VM arguments\u2019. Similarly, if Tomcat gives a HeapSpaceError, add \u201c-Xmx1024m\u201d to these options (adjust downwards for low-memory systems). Report issues here: http://yellowgrass.org/project/WebDSL . You can also subscribe to the mailing https://mailman.st.ewi.tudelft.nl/listinfo/webdsl and report your issue, or go to the #webdsl channel on irc.freenode.net","title":"Troubleshooting"},{"location":"reference/webdsl-apps/","text":"WebDSL Apps \u00b6 The structure of a WebDSL application \u00b6 WebDSL application are organized in *.app files. Each .app file has a header, that either declares the name of a module or the name of an application . The declared name should be identical to the filename. Each application needs an .app file that declares the name of the application. This is the name refered to in the application.ini file (see below). An application can be organized in different modules . In a typical .app file the header is followed by a list of import statements, which contain a path to other modules (without extension). In this way your application can be separated over several files, and modules can be reused. Within .app files one can define sections. A section is merely a label to identify the structure of a file. Most section names have no influence on the program itself, some have however, for example in styling definitions. The real contents of a .app file are a list of definitions. This might be page-, template-, action- or entity definitions. Other kinds of definitions might be introduced by WebDSL modules. A module might either refer to a module of an WebDSL application, or to an module of the WebDSL compiler itself. In this case the latter one is refered to. Those definitions will be examined in detail in the next chapters. A very simple application might look like: HelloWorld.app: application HelloWorld imports MyFirstImport section pages define page root () { \"hello world\" IAmImported() } MyFirstImport.app: module MyFirstImport define IAmImported() { spacer \"I am imported from a module file\" } In the second file the section declaration is omitted, since an application may start with a list of declarations as well. The page that is shown when no page is specified (e.g. when visiting http://localhost:8080/yourapp ) is named \"root\" and has no arguments.","title":"WebDSL Apps"},{"location":"reference/webdsl-apps/#webdsl-apps","text":"","title":"WebDSL Apps"},{"location":"reference/webdsl-apps/#the-structure-of-a-webdsl-application","text":"WebDSL application are organized in *.app files. Each .app file has a header, that either declares the name of a module or the name of an application . The declared name should be identical to the filename. Each application needs an .app file that declares the name of the application. This is the name refered to in the application.ini file (see below). An application can be organized in different modules . In a typical .app file the header is followed by a list of import statements, which contain a path to other modules (without extension). In this way your application can be separated over several files, and modules can be reused. Within .app files one can define sections. A section is merely a label to identify the structure of a file. Most section names have no influence on the program itself, some have however, for example in styling definitions. The real contents of a .app file are a list of definitions. This might be page-, template-, action- or entity definitions. Other kinds of definitions might be introduced by WebDSL modules. A module might either refer to a module of an WebDSL application, or to an module of the WebDSL compiler itself. In this case the latter one is refered to. Those definitions will be examined in detail in the next chapters. A very simple application might look like: HelloWorld.app: application HelloWorld imports MyFirstImport section pages define page root () { \"hello world\" IAmImported() } MyFirstImport.app: module MyFirstImport define IAmImported() { spacer \"I am imported from a module file\" } In the second file the section declaration is omitted, since an application may start with a list of declarations as well. The page that is shown when no page is specified (e.g. when visiting http://localhost:8080/yourapp ) is named \"root\" and has no arguments.","title":"The structure of a WebDSL application"},{"location":"releases/","text":"WebDSL Releases \u00b6 WebDSL Plugin for Eclipse \u00b6 Download the latest release of the WebDSL Plugin for Eclipse bundle for your platform: WebDSL in Eclipse bundle Installation instructions . Find older releases on the buildfarm . Or install the WebDSL plugin in an existing Eclipse 3.5+ installation using this update site: https://webdsl.org/update Installation instructions . WebDSL Command-Line Interface \u00b6 Download the latest release of the WebDSL CLI: WebDSL CLI Installation instructions . Find older releases on the buildfarm .","title":"WebDSL Releases"},{"location":"releases/#webdsl-releases","text":"","title":"WebDSL Releases"},{"location":"releases/#webdsl-plugin-for-eclipse","text":"Download the latest release of the WebDSL Plugin for Eclipse bundle for your platform: WebDSL in Eclipse bundle Installation instructions . Find older releases on the buildfarm . Or install the WebDSL plugin in an existing Eclipse 3.5+ installation using this update site: https://webdsl.org/update Installation instructions .","title":"WebDSL Plugin for Eclipse"},{"location":"releases/#webdsl-command-line-interface","text":"Download the latest release of the WebDSL CLI: WebDSL CLI Installation instructions . Find older releases on the buildfarm .","title":"WebDSL Command-Line Interface"},{"location":"support/","text":"Support \u00b6 If you need help with installing or using WebDSL, or you are interested in contributing to WebDSL, here is how to get involved: Mailing list \u00b6 You can subscribe to the mailing list for asking questions: https://groups.google.com/d/forum/webdsl Issue Tracker \u00b6 Issues are tracked in YellowGrass: http://yellowgrass.org/project/WebDSL Search the WebDSL Source Code \u00b6 The WebDSL repositories are indexed on reposearch: http://codefinder.org/search/WebDSL","title":"Support"},{"location":"support/#support","text":"If you need help with installing or using WebDSL, or you are interested in contributing to WebDSL, here is how to get involved:","title":"Support"},{"location":"support/#mailing-list","text":"You can subscribe to the mailing list for asking questions: https://groups.google.com/d/forum/webdsl","title":"Mailing list"},{"location":"support/#issue-tracker","text":"Issues are tracked in YellowGrass: http://yellowgrass.org/project/WebDSL","title":"Issue Tracker"},{"location":"support/#search-the-webdsl-source-code","text":"The WebDSL repositories are indexed on reposearch: http://codefinder.org/search/WebDSL","title":"Search the WebDSL Source Code"},{"location":"tutorials/","text":"Tutorials \u00b6 This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of WebDSL in a specific scope. For guides on achieving specific tasks, see the How To's section. For the WebDSL language reference, see the Reference section. Setup for the Tutorials \u00b6 Installing WebDSL is necessary to follow the tutorials. Use the installation guide and start to learn by example using the tutorials. List of Available Tutorials \u00b6 Hello World Pages and Navigation Templates","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of WebDSL in a specific scope. For guides on achieving specific tasks, see the How To's section. For the WebDSL language reference, see the Reference section.","title":"Tutorials"},{"location":"tutorials/#setup-for-the-tutorials","text":"Installing WebDSL is necessary to follow the tutorials. Use the installation guide and start to learn by example using the tutorials.","title":"Setup for the Tutorials"},{"location":"tutorials/#list-of-available-tutorials","text":"Hello World Pages and Navigation Templates","title":"List of Available Tutorials"},{"location":"tutorials/hello-world/","text":"Hello World \u00b6 To create a Hello World application in WebDSL, we have to: Create a WebDSL project; Output Hello World on the root page; Build and deploy the application. Create a New Project \u00b6 Open the WebDSL editor and right-click the Package Explorer . Select New WebDSL Project to make the project configuration show up. Enter project name: HelloWorld and press Finish . Output Hello World on the Root Page \u00b6 The generated project contains lots of files but we only need the main application file for this tutorial. Open HelloWorld.app in the root directory of the new project. It should look as follows: 1 2 3 application HelloWorld page root(){ \"Hello world\" } Build and Deploy the Application \u00b6 To see the resulting web application in the browser, we have to compile and deploy the WebDSL code. Navigate to the project directory in the terminal (e.g. ~/eclipse-workspace/HelloWorld/ ). To compile and run the application in one command, execute webdsl run : $ webdsl run # This should start a local web server and generate the following output: # ... # [ Main | info ] stage 1: parsing HelloWorld.app [ 0.78s ] # ... # [ Main | info ] stage 11: writing files [ 0.04s ] # ... # Now compiling generated Java code # ... # Some file copying # ... # Some SQL DROP/CREATE table statements # ... # Some Tomcat commands # ... # [XX <Month> XX:XX:XX HelloWorld] Tomcat web server started, your web application is available at http://localhost:8080/HelloWorld. Press ctrl+c to stop the web server. Browsing to http://localhost:8080/HelloWorld/ opens the root page of your application and should output Hello world as we specified in HelloWorld.app . To stop the application server, simply press Ctrl + C in the terminal where the app is running. Summary \u00b6 In this tutorial we created a web application with WebDSL, consisting of a single page that outputs Hello world .","title":"Hello World"},{"location":"tutorials/hello-world/#hello-world","text":"To create a Hello World application in WebDSL, we have to: Create a WebDSL project; Output Hello World on the root page; Build and deploy the application.","title":"Hello World"},{"location":"tutorials/hello-world/#create-a-new-project","text":"Open the WebDSL editor and right-click the Package Explorer . Select New WebDSL Project to make the project configuration show up. Enter project name: HelloWorld and press Finish .","title":"Create a New Project"},{"location":"tutorials/hello-world/#output-hello-world-on-the-root-page","text":"The generated project contains lots of files but we only need the main application file for this tutorial. Open HelloWorld.app in the root directory of the new project. It should look as follows: 1 2 3 application HelloWorld page root(){ \"Hello world\" }","title":"Output Hello World on the Root Page"},{"location":"tutorials/hello-world/#build-and-deploy-the-application","text":"To see the resulting web application in the browser, we have to compile and deploy the WebDSL code. Navigate to the project directory in the terminal (e.g. ~/eclipse-workspace/HelloWorld/ ). To compile and run the application in one command, execute webdsl run : $ webdsl run # This should start a local web server and generate the following output: # ... # [ Main | info ] stage 1: parsing HelloWorld.app [ 0.78s ] # ... # [ Main | info ] stage 11: writing files [ 0.04s ] # ... # Now compiling generated Java code # ... # Some file copying # ... # Some SQL DROP/CREATE table statements # ... # Some Tomcat commands # ... # [XX <Month> XX:XX:XX HelloWorld] Tomcat web server started, your web application is available at http://localhost:8080/HelloWorld. Press ctrl+c to stop the web server. Browsing to http://localhost:8080/HelloWorld/ opens the root page of your application and should output Hello world as we specified in HelloWorld.app . To stop the application server, simply press Ctrl + C in the terminal where the app is running.","title":"Build and Deploy the Application"},{"location":"tutorials/hello-world/#summary","text":"In this tutorial we created a web application with WebDSL, consisting of a single page that outputs Hello world .","title":"Summary"},{"location":"tutorials/pages-and-navigation/","text":"Pages and navigation \u00b6 In this tutorial we will create an online cookbook. To achieve this, we have to: Define a homepage; Define a recipe page; Navigate from page to page; Add parameters to the recipe page. Setup \u00b6 We start this tutorial with a project named cookbook . To learn how to set up a WebDSL project, follow our Hello World tutorial . Defining the Homepage \u00b6 Our homepage will list all recipes available in the cookbook. Open cookbook.app and change the root page accordingly. 1 2 3 4 5 6 7 8 9 10 11 application cookbook page root() { header { \"Recipes\" } list { listitem { \"Lasagne\" } listitem { \"Pancakes\" } listitem { \"Tomato Soup\" } } } Built-in templates In the code snippet above, header , list and listitem are templates defined in the built-in.app . header { \"Recipes\" } is syntactic sugar for <h1> \"Recipes\" </h1> . Once built and ran, the result (visible at http://localhost:8080/cookbook/ ) is a homepage with the static elements we defined. Adding a Recipe Page \u00b6 Next, we would like to have an additional page in our application: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 application cookbook page root() { header { \"Recipes\" } list { listitem { \"Lasagne\" } listitem { \"Pancakes\" } listitem { \"Tomato Soup\" } } } page recipe() { header { \"I'm a recipe!\" } } In this updated version, visiting http://localhost:8080/cookbook/ will still show the home page as we have seen before. The new recipe page is available on http://localhost:8080/cookbook/recipe . Adding Navigation \u00b6 In our previous build, we have two separate pages but no link from one to the other. To add links to other pages, we can use the navigate construct that WebDSL provides: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 application cookbook page root() { header { \"Recipes\" } list { listitem { navigate recipe() { \"Lasagne\" } } listitem { navigate recipe() { \"Pancakes\" } } listitem { navigate recipe() { \"Tomato Soup\" } } } } page recipe() { navigate root() { \"Back to homepage\" } header { \"I'm a recipe!\" } } A navigate call consists of: A page call (i.e. recipe() in our case) The elements that the link should be on, between brackets (i.e. a single String \"Lasagne\" in our case) The updated version of our application shows the list items as links to the recipe page, which now also includes a link back to the homepage. Add Page Parameters \u00b6 The last thing to do, in order to complete our cookbook, is to show which recipe you are currently viewing. In the previous build, we could link from our homepage to the recipe page, but the recipe page was always the same. To make the recipe page aware of the current recipe, we will add a page parameter to its definition, and update the page calls to the recipe page accordingly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 application cookbook page root() { header { \"Recipes\" } list { listitem { navigate recipe(\"Lasagne\") { \"Lasagne\" } } listitem { navigate recipe(\"Pancakes\") { \"Pancakes\" } } listitem { navigate recipe(\"Tomato Soup\") { \"Tomato Soup\" } } } } page recipe(name : String) { navigate root() { \"Back to homepage\" } header { \"Recipe: ~name\" } } String interpolation In the code snippet above, String interpolation (with a tilde ~ ) is used to insert the parameter name in the header: \"Recipe: ~name\" . The updated version of our application passes the recipe name as page pararmeter. This change is reflected in the URL. Instead of http://localhost:8080/cookbook/recipe , the name parameter is now a part of the new URL: http://localhost:8080/cookbook/recipe/<name> . Summary \u00b6 In this tutorial, we created an online cookbook using multiple page definitions, page parameters and navigation between pages.","title":"Pages and navigation"},{"location":"tutorials/pages-and-navigation/#pages-and-navigation","text":"In this tutorial we will create an online cookbook. To achieve this, we have to: Define a homepage; Define a recipe page; Navigate from page to page; Add parameters to the recipe page.","title":"Pages and navigation"},{"location":"tutorials/pages-and-navigation/#setup","text":"We start this tutorial with a project named cookbook . To learn how to set up a WebDSL project, follow our Hello World tutorial .","title":"Setup"},{"location":"tutorials/pages-and-navigation/#defining-the-homepage","text":"Our homepage will list all recipes available in the cookbook. Open cookbook.app and change the root page accordingly. 1 2 3 4 5 6 7 8 9 10 11 application cookbook page root() { header { \"Recipes\" } list { listitem { \"Lasagne\" } listitem { \"Pancakes\" } listitem { \"Tomato Soup\" } } } Built-in templates In the code snippet above, header , list and listitem are templates defined in the built-in.app . header { \"Recipes\" } is syntactic sugar for <h1> \"Recipes\" </h1> . Once built and ran, the result (visible at http://localhost:8080/cookbook/ ) is a homepage with the static elements we defined.","title":"Defining the Homepage"},{"location":"tutorials/pages-and-navigation/#adding-a-recipe-page","text":"Next, we would like to have an additional page in our application: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 application cookbook page root() { header { \"Recipes\" } list { listitem { \"Lasagne\" } listitem { \"Pancakes\" } listitem { \"Tomato Soup\" } } } page recipe() { header { \"I'm a recipe!\" } } In this updated version, visiting http://localhost:8080/cookbook/ will still show the home page as we have seen before. The new recipe page is available on http://localhost:8080/cookbook/recipe .","title":"Adding a Recipe Page"},{"location":"tutorials/pages-and-navigation/#adding-navigation","text":"In our previous build, we have two separate pages but no link from one to the other. To add links to other pages, we can use the navigate construct that WebDSL provides: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 application cookbook page root() { header { \"Recipes\" } list { listitem { navigate recipe() { \"Lasagne\" } } listitem { navigate recipe() { \"Pancakes\" } } listitem { navigate recipe() { \"Tomato Soup\" } } } } page recipe() { navigate root() { \"Back to homepage\" } header { \"I'm a recipe!\" } } A navigate call consists of: A page call (i.e. recipe() in our case) The elements that the link should be on, between brackets (i.e. a single String \"Lasagne\" in our case) The updated version of our application shows the list items as links to the recipe page, which now also includes a link back to the homepage.","title":"Adding Navigation"},{"location":"tutorials/pages-and-navigation/#add-page-parameters","text":"The last thing to do, in order to complete our cookbook, is to show which recipe you are currently viewing. In the previous build, we could link from our homepage to the recipe page, but the recipe page was always the same. To make the recipe page aware of the current recipe, we will add a page parameter to its definition, and update the page calls to the recipe page accordingly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 application cookbook page root() { header { \"Recipes\" } list { listitem { navigate recipe(\"Lasagne\") { \"Lasagne\" } } listitem { navigate recipe(\"Pancakes\") { \"Pancakes\" } } listitem { navigate recipe(\"Tomato Soup\") { \"Tomato Soup\" } } } } page recipe(name : String) { navigate root() { \"Back to homepage\" } header { \"Recipe: ~name\" } } String interpolation In the code snippet above, String interpolation (with a tilde ~ ) is used to insert the parameter name in the header: \"Recipe: ~name\" . The updated version of our application passes the recipe name as page pararmeter. This change is reflected in the URL. Instead of http://localhost:8080/cookbook/recipe , the name parameter is now a part of the new URL: http://localhost:8080/cookbook/recipe/<name> .","title":"Add Page Parameters"},{"location":"tutorials/pages-and-navigation/#summary","text":"In this tutorial, we created an online cookbook using multiple page definitions, page parameters and navigation between pages.","title":"Summary"},{"location":"tutorials/templates/","text":"Templates \u00b6 In this tutorial we will change the online cookbook from previous tutorial to have less code duplication. To achieve this, we have to: Define a homepage; Define a recipe page; Navigate from page to page; Add parameters to the recipe page. WORK IN PROGRESS","title":"Templates"},{"location":"tutorials/templates/#templates","text":"In this tutorial we will change the online cookbook from previous tutorial to have less code duplication. To achieve this, we have to: Define a homepage; Define a recipe page; Navigate from page to page; Add parameters to the recipe page. WORK IN PROGRESS","title":"Templates"}]}