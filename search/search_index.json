{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WebDSL \u00b6 WebDSL is a domain-specific language for developing dynamic web applications with a rich data model, developed and maintained by the Programming Language Group at Delft University of Technology .","title":"WebDSL"},{"location":"#webdsl","text":"WebDSL is a domain-specific language for developing dynamic web applications with a rich data model, developed and maintained by the Programming Language Group at Delft University of Technology .","title":"WebDSL"},{"location":"about/","text":"About WebDSL \u00b6 WebDSL is a domain-specific language for developing dynamic web applications with a rich data model. Features \u00b6 Domain modeling User interfaces Action code Access control Data validation Ajax Search Email Styling Recurring tasks Java class interface Software \u00b6 WebDSL applications are translated to Java web applications. The WebDSL generator is implemented using Stratego/XT , SDF, and Spoofax . IDE support for developing WebDSL applications is provided by the Eclipse plugin . Developers \u00b6 WebDSL is being developed by Eelco Visser and Ph.D./M.Sc. students in the context of the Model-Driven Software Evolution project at Delft University of Technology. Active developers \u00b6 Max de Krieger Alexander Chichigin Danny Groenewegen Elmer van Chastelet Daniel A. A. Pelsmaeker Eelco Visser Non-active developers \u00b6 Zef Hemel Lennart Kats Sander Vermolen Sander van der Burg Nathan Bruning Chris Gersen Chris Melman Michel Weststrate Jippe Holwerda Ruben Verhaaf Wouter Mouw","title":"About"},{"location":"about/#about-webdsl","text":"WebDSL is a domain-specific language for developing dynamic web applications with a rich data model.","title":"About WebDSL"},{"location":"about/#features","text":"Domain modeling User interfaces Action code Access control Data validation Ajax Search Email Styling Recurring tasks Java class interface","title":"Features"},{"location":"about/#software","text":"WebDSL applications are translated to Java web applications. The WebDSL generator is implemented using Stratego/XT , SDF, and Spoofax . IDE support for developing WebDSL applications is provided by the Eclipse plugin .","title":"Software"},{"location":"about/#developers","text":"WebDSL is being developed by Eelco Visser and Ph.D./M.Sc. students in the context of the Model-Driven Software Evolution project at Delft University of Technology.","title":"Developers"},{"location":"about/#active-developers","text":"Max de Krieger Alexander Chichigin Danny Groenewegen Elmer van Chastelet Daniel A. A. Pelsmaeker Eelco Visser","title":"Active developers"},{"location":"about/#non-active-developers","text":"Zef Hemel Lennart Kats Sander Vermolen Sander van der Burg Nathan Bruning Chris Gersen Chris Melman Michel Weststrate Jippe Holwerda Ruben Verhaaf Wouter Mouw","title":"Non-active developers"},{"location":"releases/","text":"WebDSL Releases \u00b6 WebDSL Plugin for Eclipse \u00b6 Download the latest release of the WebDSL Plugin for Eclipse bundle for your platform: WebDSL in Eclipse bundle Installation instructions . Find older releases on the buildfarm . Or install the WebDSL plugin in an existing Eclipse 3.5+ installation using this update site: https://webdsl.org/update Installation instructions . WebDSL Command-Line Interface \u00b6 Download the latest release of the WebDSL CLI: WebDSL CLI Installation instructions . Find older releases on the buildfarm .","title":"Releases"},{"location":"releases/#webdsl-releases","text":"","title":"WebDSL Releases"},{"location":"releases/#webdsl-plugin-for-eclipse","text":"Download the latest release of the WebDSL Plugin for Eclipse bundle for your platform: WebDSL in Eclipse bundle Installation instructions . Find older releases on the buildfarm . Or install the WebDSL plugin in an existing Eclipse 3.5+ installation using this update site: https://webdsl.org/update Installation instructions .","title":"WebDSL Plugin for Eclipse"},{"location":"releases/#webdsl-command-line-interface","text":"Download the latest release of the WebDSL CLI: WebDSL CLI Installation instructions . Find older releases on the buildfarm .","title":"WebDSL Command-Line Interface"},{"location":"support/","text":"Support \u00b6 If you need help with installing or using WebDSL, or you are interested in contributing to WebDSL, here is how to get involved: Mailing list \u00b6 You can subscribe to the mailing list for asking questions: https://groups.google.com/d/forum/webdsl Issue Tracker \u00b6 Issues are tracked in YellowGrass: http://yellowgrass.org/project/WebDSL Search the WebDSL Source Code \u00b6 The WebDSL repositories are indexed on reposearch: http://codefinder.org/search/WebDSL","title":"Support"},{"location":"support/#support","text":"If you need help with installing or using WebDSL, or you are interested in contributing to WebDSL, here is how to get involved:","title":"Support"},{"location":"support/#mailing-list","text":"You can subscribe to the mailing list for asking questions: https://groups.google.com/d/forum/webdsl","title":"Mailing list"},{"location":"support/#issue-tracker","text":"Issues are tracked in YellowGrass: http://yellowgrass.org/project/WebDSL","title":"Issue Tracker"},{"location":"support/#search-the-webdsl-source-code","text":"The WebDSL repositories are indexed on reposearch: http://codefinder.org/search/WebDSL","title":"Search the WebDSL Source Code"},{"location":"background/","text":"Background \u00b6 This section contains information on the ideas, architecture, and design decisions behind WebDSL. For the WebDSL language reference, see the Reference section. No background yet.","title":"Background"},{"location":"background/#background","text":"This section contains information on the ideas, architecture, and design decisions behind WebDSL. For the WebDSL language reference, see the Reference section. No background yet.","title":"Background"},{"location":"background/meeting-notes/","text":"Meeting Notes \u00b6 Meeting notes of past WebDSL meetings are documented here. WebDSL Improvement Meeting May 2021 \u00b6 The following points were discussed in a WebDSL improvement meeting. Documentation \u00b6 A new documentation website using MkDocs Material, organized according to https://documentation.divio.com/ . Port all relevant material from the current documentation to the new style and organize accordingly. Introduce a new getting-started guide, inspired by the guide written for the Web Programming Languages course. Development Experience \u00b6 Finish the WebDSL SDF3 and Statix implementation to provide a new, modernized and robust WebDSL front-end. Modernize the WebDSL back-end: get analysis information in Stratego from a Stratego-Statix API, split up transformation tasks in more modular fashion to prepare for incrementalization. New Language Features \u00b6 Introduce more client-side features or constructs in order to maintain WebDSL's consistency when writing interactive web apps. Introduce the notion of transactions in WebDSL in order to better integrate with external services. Enhancement Proposals \u00b6 Syntax \u00b6 Add Syntactic sugar for easily usable page routing customization. Reduce Inconsistencies in the existing syntax: Both .length and .length() are used for different types. Optional semicolons in template code vs. required semicolons in action code. Optional brackets for most definitions (templates and actions) but required brackets when calling an action. Notion of sections is unnecessary. Improve Built-in Functionality \u00b6 Improve interoperability of built-in types such as Date/DateTime/Time, Integer/Float/Long and File/Image. Introduce missing built-in inputs: inputajax for Secret and WikiText types. Reduce the effort necessary to delete existing entities that have relations. New Language Constructs \u00b6 Introduce break/continue for loops and support early returns in services. Introduce conditionals in template attributes. Introduce locally overridable UI attributes. Introduce the notion of middleware that can for example validate or modify incoming requests. Lucene Search \u00b6 Support searching for true substrings (*query*). Support the ability to chain search conditions on multiple fields. Development Environment \u00b6 Introduce a containerized environment to build and run WebDSL apps. Reduce the effort necessary to set up a project due to configuration settings in application.ini . Certain database modes would not work on certain operating systems, the default one has to work on all platforms.","title":"Meeting Notes"},{"location":"background/meeting-notes/#meeting-notes","text":"Meeting notes of past WebDSL meetings are documented here.","title":"Meeting Notes"},{"location":"background/meeting-notes/#webdsl-improvement-meeting-may-2021","text":"The following points were discussed in a WebDSL improvement meeting.","title":"WebDSL Improvement Meeting May 2021"},{"location":"background/meeting-notes/#documentation","text":"A new documentation website using MkDocs Material, organized according to https://documentation.divio.com/ . Port all relevant material from the current documentation to the new style and organize accordingly. Introduce a new getting-started guide, inspired by the guide written for the Web Programming Languages course.","title":"Documentation"},{"location":"background/meeting-notes/#development-experience","text":"Finish the WebDSL SDF3 and Statix implementation to provide a new, modernized and robust WebDSL front-end. Modernize the WebDSL back-end: get analysis information in Stratego from a Stratego-Statix API, split up transformation tasks in more modular fashion to prepare for incrementalization.","title":"Development Experience"},{"location":"background/meeting-notes/#new-language-features","text":"Introduce more client-side features or constructs in order to maintain WebDSL's consistency when writing interactive web apps. Introduce the notion of transactions in WebDSL in order to better integrate with external services.","title":"New Language Features"},{"location":"background/meeting-notes/#enhancement-proposals","text":"","title":"Enhancement Proposals"},{"location":"background/meeting-notes/#syntax","text":"Add Syntactic sugar for easily usable page routing customization. Reduce Inconsistencies in the existing syntax: Both .length and .length() are used for different types. Optional semicolons in template code vs. required semicolons in action code. Optional brackets for most definitions (templates and actions) but required brackets when calling an action. Notion of sections is unnecessary.","title":"Syntax"},{"location":"background/meeting-notes/#improve-built-in-functionality","text":"Improve interoperability of built-in types such as Date/DateTime/Time, Integer/Float/Long and File/Image. Introduce missing built-in inputs: inputajax for Secret and WikiText types. Reduce the effort necessary to delete existing entities that have relations.","title":"Improve Built-in Functionality"},{"location":"background/meeting-notes/#new-language-constructs","text":"Introduce break/continue for loops and support early returns in services. Introduce conditionals in template attributes. Introduce locally overridable UI attributes. Introduce the notion of middleware that can for example validate or modify incoming requests.","title":"New Language Constructs"},{"location":"background/meeting-notes/#lucene-search","text":"Support searching for true substrings (*query*). Support the ability to chain search conditions on multiple fields.","title":"Lucene Search"},{"location":"background/meeting-notes/#development-environment","text":"Introduce a containerized environment to build and run WebDSL apps. Reduce the effort necessary to set up a project due to configuration settings in application.ini . Certain database modes would not work on certain operating systems, the default one has to work on all platforms.","title":"Development Environment"},{"location":"howtos/","text":"How-To's \u00b6 These are some How-To's that help you to get to a specific goal or result with WebDSL. For hands-on tutorials on learning WebDSL, see the Tutorials section. For the WebDSL language reference, see the Reference section. Installation and Build \u00b6 Install WebDSL Install the WebDSL Eclipse Bundle Install the WebDSL Eclipse Plugin Manually Install and Use the WebDSL CLI","title":"How-To's"},{"location":"howtos/#how-tos","text":"These are some How-To's that help you to get to a specific goal or result with WebDSL. For hands-on tutorials on learning WebDSL, see the Tutorials section. For the WebDSL language reference, see the Reference section.","title":"How-To's"},{"location":"howtos/#installation-and-build","text":"Install WebDSL Install the WebDSL Eclipse Bundle Install the WebDSL Eclipse Plugin Manually Install and Use the WebDSL CLI","title":"Installation and Build"},{"location":"howtos/install-cli/","text":"Install and Use the WebDSL CLI \u00b6 Download the WebDSL CLI for your platform: WebDSL CLI Installation \u00b6 An installation of Java 8 or newer and Apache Ant are required. Extract the zip file. Add the webdsl/bin directory to your $PATH . Usage \u00b6 Go to the directory of your application and execute: webdsl run appname.app This will override any existing application.ini file. This generates an application.ini file configured for testing with an H2 in-memory database . If there is already an application.ini file with configuration (see Application Configuration options), use instead: webdsl run Pressing Ctrl + C stops the application. Faster compilation on command-line You can avoid JVM startup overhead by keeping the WebDSL compiler process running. This requires having the Nailgun client installed. For example, on macOS you can install nailgun using brew install nailgun . Add to the application.ini configuration file of your project the following line to use the compile server for all the commands like webdsl run : usecompileserver = true To start the WebDSL nailgun server process, invoke: webdsl start","title":"Install and Use the WebDSL CLI"},{"location":"howtos/install-cli/#install-and-use-the-webdsl-cli","text":"Download the WebDSL CLI for your platform: WebDSL CLI","title":"Install and Use the WebDSL CLI"},{"location":"howtos/install-cli/#installation","text":"An installation of Java 8 or newer and Apache Ant are required. Extract the zip file. Add the webdsl/bin directory to your $PATH .","title":"Installation"},{"location":"howtos/install-cli/#usage","text":"Go to the directory of your application and execute: webdsl run appname.app This will override any existing application.ini file. This generates an application.ini file configured for testing with an H2 in-memory database . If there is already an application.ini file with configuration (see Application Configuration options), use instead: webdsl run Pressing Ctrl + C stops the application. Faster compilation on command-line You can avoid JVM startup overhead by keeping the WebDSL compiler process running. This requires having the Nailgun client installed. For example, on macOS you can install nailgun using brew install nailgun . Add to the application.ini configuration file of your project the following line to use the compile server for all the commands like webdsl run : usecompileserver = true To start the WebDSL nailgun server process, invoke: webdsl start","title":"Usage"},{"location":"howtos/install-eclipse-bundle/","text":"Install the Eclipse with WebDSL Plugin Bundle \u00b6 Install an Eclipse instance with the WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle Troubleshooting \u00b6 macOS: \"Eclipse\" cannot be opened because the developer could not be verified \u00b6 macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the com.apple.quarantine attribute, do: xattr -rc Eclipse.app Eclipse does not start, or complains about missing Java \u00b6 Ensure you have a distribution of Java installed. Then in eclipse.ini , add a -vm line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS: -vm /Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib","title":"Install the Eclipse with WebDSL Plugin Bundle"},{"location":"howtos/install-eclipse-bundle/#install-the-eclipse-with-webdsl-plugin-bundle","text":"Install an Eclipse instance with the WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle","title":"Install the Eclipse with WebDSL Plugin Bundle"},{"location":"howtos/install-eclipse-bundle/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"howtos/install-eclipse-bundle/#macos-eclipse-cannot-be-opened-because-the-developer-could-not-be-verified","text":"macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the com.apple.quarantine attribute, do: xattr -rc Eclipse.app","title":" macOS: \"Eclipse\" cannot be opened because the developer could not be verified"},{"location":"howtos/install-eclipse-bundle/#eclipse-does-not-start-or-complains-about-missing-java","text":"Ensure you have a distribution of Java installed. Then in eclipse.ini , add a -vm line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS: -vm /Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib","title":"Eclipse does not start, or complains about missing Java"},{"location":"howtos/install-eclipse-plugin-manually/","text":"Install the WebDSL Eclipse Plugin \u00b6 Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer. In Eclipse, go to menu Help \u2192 Install New Software . In the Work with: text area, type: https://webdsl.org/update Uncheck Group items by category to make the plugin visible. Check WebDSL Editor . Click Install and go through the remaining steps. Restart Eclipse. It is recommended that the eclipse.ini of Eclipse is updated to give WebDSL enough stack space and memory to function correctly. Include the following options in eclipse.ini , below the line that starts with -vmargs . -Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server On macOS this file can be found at Eclipse.app/Contents/MacOS/eclipse.ini .","title":"Install the WebDSL Eclipse Plugin"},{"location":"howtos/install-eclipse-plugin-manually/#install-the-webdsl-eclipse-plugin","text":"Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer. In Eclipse, go to menu Help \u2192 Install New Software . In the Work with: text area, type: https://webdsl.org/update Uncheck Group items by category to make the plugin visible. Check WebDSL Editor . Click Install and go through the remaining steps. Restart Eclipse. It is recommended that the eclipse.ini of Eclipse is updated to give WebDSL enough stack space and memory to function correctly. Include the following options in eclipse.ini , below the line that starts with -vmargs . -Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server On macOS this file can be found at Eclipse.app/Contents/MacOS/eclipse.ini .","title":"Install the WebDSL Eclipse Plugin"},{"location":"howtos/install/","text":"Install WebDSL \u00b6 To get started with WebDSL, install the WebDSL editor and the WebDSL Command-Line interface. WebDSL Editor \u00b6 We provide an Eclipse bundle in which you can create and edit WebDSL applications with the assistance of syntax highlighting, static analysis and code completion. Alternatively, you can download the WebDSL plugin in your own Eclipse instance. Recommended: Eclipse Bundle Download an Eclipse instance with the latest WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle Installation instructions . Alternative: Eclipse Plugin Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer through the update site: https://webdsl.org/update Installation instructions . Command-Line Interface \u00b6 The WebDSL CLI transforms your WebDSL code to web applications. Recommended: Download Latest Build Download the WebDSL CLI for your platform: WebDSL CLI Installation instructions . Alternative: Build WebDSL Yourself Clone the WebDSL GitHub repository and follow the instructions listed there. WebDSL GitHub Repository Start Creating Web Applications \u00b6 Once installed and started, you are ready to create web applications with WebDSL. Learn WebDSL by example through our tutorials .","title":"Install WebDSL"},{"location":"howtos/install/#install-webdsl","text":"To get started with WebDSL, install the WebDSL editor and the WebDSL Command-Line interface.","title":"Install WebDSL"},{"location":"howtos/install/#webdsl-editor","text":"We provide an Eclipse bundle in which you can create and edit WebDSL applications with the assistance of syntax highlighting, static analysis and code completion. Alternatively, you can download the WebDSL plugin in your own Eclipse instance. Recommended: Eclipse Bundle Download an Eclipse instance with the latest WebDSL plugin pre-installed for your platform: WebDSL in Eclipse bundle Installation instructions . Alternative: Eclipse Plugin Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer through the update site: https://webdsl.org/update Installation instructions .","title":"WebDSL Editor"},{"location":"howtos/install/#command-line-interface","text":"The WebDSL CLI transforms your WebDSL code to web applications. Recommended: Download Latest Build Download the WebDSL CLI for your platform: WebDSL CLI Installation instructions . Alternative: Build WebDSL Yourself Clone the WebDSL GitHub repository and follow the instructions listed there. WebDSL GitHub Repository","title":"Command-Line Interface"},{"location":"howtos/install/#start-creating-web-applications","text":"Once installed and started, you are ready to create web applications with WebDSL. Learn WebDSL by example through our tutorials .","title":"Start Creating Web Applications"},{"location":"reference/","text":"Reference \u00b6 This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section. No reference yet.","title":"Reference"},{"location":"reference/#reference","text":"This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section. No reference yet.","title":"Reference"},{"location":"tutorials/","text":"Tutorials \u00b6 This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of WebDSL in a specific scope. For guides on achieving specific tasks, see the How To's section. For the WebDSL language reference, see the Reference section. Setup for the Tutorials \u00b6 Installing WebDSL is required before following the tutorials. Follow the installation guide and start to learn by example using the tutorials. List of Available Tutorials \u00b6 Hello World","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of WebDSL in a specific scope. For guides on achieving specific tasks, see the How To's section. For the WebDSL language reference, see the Reference section.","title":"Tutorials"},{"location":"tutorials/#setup-for-the-tutorials","text":"Installing WebDSL is required before following the tutorials. Follow the installation guide and start to learn by example using the tutorials.","title":"Setup for the Tutorials"},{"location":"tutorials/#list-of-available-tutorials","text":"Hello World","title":"List of Available Tutorials"},{"location":"tutorials/hello-world/","text":"Hello World \u00b6 To create a Hello World application in WebDSL, we have to: Create a WebDSL project; Output Hello World on the root page; Build and deploy the application. Create a New Project \u00b6 Open the WebDSL editor and right-click the Package Explorer . Select New WebDSL Project to make the project configuration show up. Enter project name: HelloWorld and press Finish . Output Hello World on the Root Page \u00b6 The generated project contains lots of files but we only need the main application file for this tutorial. Open HelloWorld.app in the root directory of the new project. It should look as follows: application HelloWorld page root(){ \"Hello world\" } Build and Deploy the Application \u00b6 To see the resulting web application in the browser, we have to compile and deploy the WebDSL code. Navigate to the project directory in the terminal (e.g. ~/eclipse-workspace/HelloWorld/ ). To compile and deploy the application in one command, execute webdsl run : $ webdsl run # This should start a local web server and generate the following output: # ... # [ Main | info ] stage 1: parsing HelloWorld.app [ 0.78s ] # ... # [ Main | info ] stage 11: writing files [ 0.04s ] # ... # Now compiling generated Java code # ... # Some file copying # ... # Some SQL DROP/CREATE table statements # ... # Some Tomcat commands # ... # [XX <Month> XX:XX:XX HelloWorld] Tomcat web server started, your web application is available at http://localhost:8080/HelloWorld. Press ctrl+c to stop the web server. Browsing to http://localhost:8080/HelloWorld/ opens the root page of your application and should output Hello world as we specified in HelloWorld.app . Summary \u00b6 In this tutorial we created a web application with WebDSL, consisting of a single page that outputs Hello world .","title":"Hello World"},{"location":"tutorials/hello-world/#hello-world","text":"To create a Hello World application in WebDSL, we have to: Create a WebDSL project; Output Hello World on the root page; Build and deploy the application.","title":"Hello World"},{"location":"tutorials/hello-world/#create-a-new-project","text":"Open the WebDSL editor and right-click the Package Explorer . Select New WebDSL Project to make the project configuration show up. Enter project name: HelloWorld and press Finish .","title":"Create a New Project"},{"location":"tutorials/hello-world/#output-hello-world-on-the-root-page","text":"The generated project contains lots of files but we only need the main application file for this tutorial. Open HelloWorld.app in the root directory of the new project. It should look as follows: application HelloWorld page root(){ \"Hello world\" }","title":"Output Hello World on the Root Page"},{"location":"tutorials/hello-world/#build-and-deploy-the-application","text":"To see the resulting web application in the browser, we have to compile and deploy the WebDSL code. Navigate to the project directory in the terminal (e.g. ~/eclipse-workspace/HelloWorld/ ). To compile and deploy the application in one command, execute webdsl run : $ webdsl run # This should start a local web server and generate the following output: # ... # [ Main | info ] stage 1: parsing HelloWorld.app [ 0.78s ] # ... # [ Main | info ] stage 11: writing files [ 0.04s ] # ... # Now compiling generated Java code # ... # Some file copying # ... # Some SQL DROP/CREATE table statements # ... # Some Tomcat commands # ... # [XX <Month> XX:XX:XX HelloWorld] Tomcat web server started, your web application is available at http://localhost:8080/HelloWorld. Press ctrl+c to stop the web server. Browsing to http://localhost:8080/HelloWorld/ opens the root page of your application and should output Hello world as we specified in HelloWorld.app .","title":"Build and Deploy the Application"},{"location":"tutorials/hello-world/#summary","text":"In this tutorial we created a web application with WebDSL, consisting of a single page that outputs Hello world .","title":"Summary"}]}